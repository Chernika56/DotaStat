/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 15.2 		*/
/*  Created On : 03-май-2024 19:09:48 				*/
/*  DBMS       : MySql 						*/
/* ---------------------------------------------------- */

SET FOREIGN_KEY_CHECKS=0
; 
/* Drop Tables */

DROP TABLE IF EXISTS `Assembling Items` CASCADE
;

DROP TABLE IF EXISTS `Country` CASCADE
;

DROP TABLE IF EXISTS `Game` CASCADE
;

DROP TABLE IF EXISTS `Game-Player` CASCADE
;

DROP TABLE IF EXISTS `Game-Player-Item` CASCADE
;

DROP TABLE IF EXISTS `Heroes` CASCADE
;

DROP TABLE IF EXISTS `Items` CASCADE
;

DROP TABLE IF EXISTS `m2m_Hero-Skill` CASCADE
;

DROP TABLE IF EXISTS `m2m_Match-Team` CASCADE
;

DROP TABLE IF EXISTS `m2m_Player-Team` CASCADE
;

DROP TABLE IF EXISTS `m2m_Tournament-Match` CASCADE
;

DROP TABLE IF EXISTS `m2m_Tournament-Studio` CASCADE
;

DROP TABLE IF EXISTS `m2m_Tournament-Team` CASCADE
;

DROP TABLE IF EXISTS `Match` CASCADE
;

DROP TABLE IF EXISTS `Neutral Item` CASCADE
;

DROP TABLE IF EXISTS `Organizers` CASCADE
;

DROP TABLE IF EXISTS `Pick-Ban` CASCADE
;

DROP TABLE IF EXISTS `Player` CASCADE
;

DROP TABLE IF EXISTS `Skills` CASCADE
;

DROP TABLE IF EXISTS `Studio` CASCADE
;

DROP TABLE IF EXISTS `Team-Rating` CASCADE
;

DROP TABLE IF EXISTS `Team-Rang` CASCADE
;

DROP TABLE IF EXISTS `Teams` CASCADE
;

DROP TABLE IF EXISTS `Tournaments` CASCADE
;

DROP TABLE IF EXISTS `Units` CASCADE
;

DROP TABLE IF EXISTS `Unit-Skill` CASCADE
;

/* Drop Stored Procedures */

DROP PROCEDURE IF EXISTS `AddRatingPoints`
;

DROP PROCEDURE IF EXISTS `RatingDecrease`
;

DROP PROCEDURE IF EXISTS `UpdateRatingPoints`
;

DROP PROCEDURE IF EXISTS `UpdateTournamentTierProcedure`
;

DROP EVENT IF EXISTS `Update_Rating_Event`
;

/* Create Sequences */

DELIMITER //

SET GLOBAL event_scheduler = ON//

CREATE EVENT Update_Rating_Event
ON SCHEDULE EVERY 7 DAY
STARTS '2001-01-01 00:00:00'
DO
BEGIN
    CALL UpdateRatingPoints();
	CALL RatingDecrease();
END //
 
DELIMITER ;

/* Create Tables */

CREATE TABLE `Assembling Items`
(
	`ai_CraftedItem` INT UNSIGNED NOT NULL COMMENT 'ID предмета, который создается',
	`ai_IngredientItem` INT UNSIGNED NOT NULL COMMENT 'ID предмета, который используется для создания',
	`ai_Quantity` TINYINT UNSIGNED NULL COMMENT 'Количество предметов, необходимых для создания',
	CONSTRAINT `PK_Assembling Items` PRIMARY KEY (`ai_CraftedItem` ASC, `ai_IngredientItem` ASC)
)

;

CREATE TABLE `Country`
(
	`cn_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID страны',
	`cn_Name` VARCHAR(50) NULL COMMENT 'Название страны',
	CONSTRAINT `PK_Country` PRIMARY KEY (`cn_ID` ASC)
)

;

CREATE TABLE `Game`
(
	`g_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID игры',
	`g_Match` INT UNSIGNED NOT NULL COMMENT 'ID матча',
	`g_Number` TINYINT UNSIGNED NOT NULL COMMENT 'Номер игры',
	`g_Winner` INT UNSIGNED NULL COMMENT 'Команда-победитель',
	`g_Duration` TIME NULL COMMENT 'Длительность игры',
	`g_Date&Time` DATETIME NULL COMMENT 'Дата и время начала игры',
	CONSTRAINT `PK_Game` PRIMARY KEY (`g_ID` ASC)
)

;

CREATE TABLE `Game-Player`
(
	`gpl_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`gpl_Game` INT UNSIGNED NOT NULL COMMENT 'ID игры',
	`gpl_Player` INT UNSIGNED NOT NULL COMMENT 'ID игрока',
	`gpl_Hero` INT UNSIGNED NULL COMMENT 'ID героя',
	`gpl_Kill` INT UNSIGNED NULL COMMENT 'Количесво убийств',
	`gpl_Dead` INT UNSIGNED NULL COMMENT 'Количество смертей',
	`gpl_Support` INT UNSIGNED NULL COMMENT 'Количество помощей',
	`gpl_EnemyCreeps` INT UNSIGNED NULL COMMENT 'Вражеских крипов добито',
	`gpl_AlliedCreeps` INT UNSIGNED NULL COMMENT 'Союзных крипов добито',
	`gpl_Nethworth` INT UNSIGNED NULL COMMENT 'Общая стоимость',
	`gpl_GPM` INT UNSIGNED NULL COMMENT 'Золото в минуту',
	`gpl_EPM` INT UNSIGNED NULL COMMENT 'Опыт в минуту',
	`gpl_NeutralItem` INT UNSIGNED NULL COMMENT 'ID нейтрального предмета',
	CONSTRAINT `PK_Game-Player` PRIMARY KEY (`gpl_ID` ASC)
)

;

CREATE TABLE `Game-Player-Item`
(
	`gpli_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`gpli_Game-Player` INT UNSIGNED NOT NULL COMMENT 'ID игры и игрока',
	`gpli_Item` INT UNSIGNED NOT NULL COMMENT 'ID предмета',
	`gpli_Time` TIME NOT NULL COMMENT 'Время покупки предмета',
	CONSTRAINT `PK_Game-Gammer-Item` PRIMARY KEY (`gpli_ID` ASC)
)

;

CREATE TABLE `Heroes`
(
	`h_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID героя',
	`h_Name` VARCHAR(50) NULL COMMENT 'Имя героя',
	`h_Attribute` ENUM('strength', 'agility', 'intelligence', 'universal') NULL COMMENT 'Основной атрибут героя',
	`h_Description` VARCHAR(100) NULL COMMENT 'Описание героя',
	`h_HP` SMALLINT UNSIGNED NULL COMMENT 'Базовое значение очков здоровья',
	`h_MP` SMALLINT UNSIGNED NULL COMMENT 'Базовое значение очков маны',
	`h_HPR` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовое восстановление здоровья',
	`h_MPR` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовое восстановление очков маны',
	`h_Strength` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовая сила',
	`h_StrengthPerLVL` FLOAT(5,1) UNSIGNED NULL COMMENT 'Прирост силы за уровень',
	`h_Agility` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовая ловкость',
	`h_AgilityPerLVL` FLOAT(5,1) UNSIGNED NULL COMMENT 'Прирост ловкости за уровень',
	`h_Intelligence` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовый интелект',
	`h_IntelligencePerLVL` FLOAT(5,1) UNSIGNED NULL COMMENT 'Прирост интелекта за уровень',
	`h_Damage` SMALLINT UNSIGNED NULL COMMENT 'Базовый урон',
	`h_MoveSpeed` SMALLINT UNSIGNED NULL COMMENT 'Базовая скорость передвижения',
	`h_Armor` SMALLINT UNSIGNED NULL COMMENT 'Базовая броня',
	`h_AttackSpeed` SMALLINT UNSIGNED NULL COMMENT 'Базовая скорость атаки',
	`h_AttackInterval` FLOAT(5,3) UNSIGNED NULL COMMENT 'Базовый интервал атак',
	`h_AttackType` ENUM('melee', 'range') NULL COMMENT 'Тип атаки',
	`h_AttackRange` SMALLINT UNSIGNED NULL COMMENT 'Базовая дальность атаки',
	`h_SpellAMP` FLOAT(4,3) UNSIGNED NULL COMMENT 'Дополнительный урон заклинаний',
	`h_MagicResist` FLOAT(4,3) UNSIGNED NULL COMMENT 'Базовое сопротивление магии',
	`h_StatusResist` FLOAT(4,3) UNSIGNED NULL COMMENT 'Базовое сопротивление эффектам',
	`h_Evasion` FLOAT(4,3) UNSIGNED NULL COMMENT 'Базовое уклонение',
	`h_Scepter` VARCHAR(5000) NULL COMMENT 'Описание Aghanim''s Scepter',
	`h_Shard` VARCHAR(5000) NULL COMMENT 'Описание Aghanim''s shard',
	CONSTRAINT `PK_Heroes` PRIMARY KEY (`h_ID` ASC)
)

;

CREATE TABLE `Items`
(
	`i_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID предмета',
	`i_Name` VARCHAR(50) NULL COMMENT 'Название предмета',
	`i_Description` VARCHAR(500) NULL,
	`i_Price` SMALLINT UNSIGNED NULL COMMENT 'Цена предмета',
	`i_Type` ENUM('Consumables', 'Attributes', 'Equipment', 'Miscellaneous', 'Secret shop', 'Accessories', 'Support', 'Magical', 'Armor', 'Weapons', 'Artifacts') NULL COMMENT 'Тип предмета',
	`i_MaxCharges` TINYINT UNSIGNED NULL COMMENT 'Максимальное число зарядов',
	`i_MaxStack` TINYINT UNSIGNED NULL COMMENT 'Максимальное количество предметов в одном слоте',
	`i_Disassemble` BOOL NULL COMMENT 'Можно ли предмет разобрать',
	`i_Assemble` BOOL NULL COMMENT 'Собирается ли предмет из других предметов',
	`i_Specifications` VARCHAR(500) NULL COMMENT 'Характеристики предмета',
	CONSTRAINT `PK_Items` PRIMARY KEY (`i_ID` ASC)
)

;

CREATE TABLE `m2m_Hero-Skill`
(
	`hs_Hero` INT UNSIGNED NOT NULL COMMENT 'ID героя',
	`hs_Skill` INT UNSIGNED NOT NULL COMMENT 'ID способности',
	`hs_Number` SMALLINT UNSIGNED NULL COMMENT 'Номер способности у героя',
	CONSTRAINT `PK_m2m_Hero-Skill` PRIMARY KEY (`hs_Hero` ASC, `hs_Skill` ASC)
)

;

CREATE TABLE `m2m_Match-Team`
(
	`mtm_Match` INT UNSIGNED NOT NULL COMMENT 'ID матча',
	`mtm_Team` INT UNSIGNED NOT NULL COMMENT 'ID команды',
	CONSTRAINT `PK_m2m_Match-Team` PRIMARY KEY (`mtm_Match` ASC, `mtm_Team` ASC)
)

;

CREATE TABLE `m2m_Player-Team`
(
	`pltm_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID записи',
	`pltm_Player` INT UNSIGNED NOT NULL COMMENT 'ID игрока',
	`pltm_Team` INT UNSIGNED NOT NULL COMMENT 'ID команды',
	`pltm_Role` TINYINT UNSIGNED NULL COMMENT 'Роль игрока:
	0 - Banch
	1 - Safe lane
	2 - Mid lane
	3 - Off lane
	4 - Soft support
	5 - Hard support
	6 - Coach',
	`pltm_StartDate` DATE NULL COMMENT 'Дата начала выступления за команду',
	`pltm_EndDate` DATE NULL COMMENT 'Дата окончания выступления за команду',
	CONSTRAINT `PK_m2m_Player-Team` PRIMARY KEY (`pltm_ID` ASC)
)

;

CREATE TABLE `m2m_Tournament-Match`
(
	`trm_Tounament` INT UNSIGNED NOT NULL COMMENT 'ID турнира',
	`trm_Match` INT UNSIGNED NOT NULL COMMENT 'ID матча',
	CONSTRAINT `PK_m2m_Tournament-Match` PRIMARY KEY (`trm_Tounament` ASC, `trm_Match` ASC)
)

;

CREATE TABLE `m2m_Tournament-Studio`
(
	`trst_Tournament` INT UNSIGNED NOT NULL COMMENT 'ID турнира',
	`trst_Studio` INT UNSIGNED NOT NULL COMMENT 'ID студии',
	CONSTRAINT `PK_m2m_Tournament-Studio` PRIMARY KEY (`trst_Tournament` ASC, `trst_Studio` ASC)
)

;

CREATE TABLE `m2m_Tournament-Team`
(
	`trtm_Team` INT UNSIGNED NOT NULL COMMENT 'ID команды',
	`trtm_Tournament` INT UNSIGNED NOT NULL COMMENT 'ID турнира',
	`trtm_Result` TINYINT UNSIGNED NULL COMMENT 'Результат команды на турнире(место)',
	CONSTRAINT `PK_m2m_Tournament-Team` PRIMARY KEY (`trtm_Team` ASC, `trtm_Tournament` ASC)
)

;

CREATE TABLE `Match`
(
	`m_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID матча',
	`m_Winner` INT UNSIGNED NULL COMMENT 'Команда - победитель',
	`m_Data&Time` DATETIME NULL COMMENT 'Дата и вермя проведения матча',
	CONSTRAINT `PK_Match` PRIMARY KEY (`m_ID` ASC)
)

;

CREATE TABLE `Neutral Item`
(
	`ni_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID нейтрального предмета',
	`ni_Name` VARCHAR(50) NULL COMMENT 'Название нейстрального предмета',
	`ni_Description` VARCHAR(500) NULL COMMENT 'Описание нейтрального предмета',
	`ni_Tier` TINYINT UNSIGNED NULL COMMENT 'Уровень предмета',
	`ni_MaxCharges` TINYINT UNSIGNED NULL COMMENT 'Максимальое количество зарядов нейтрального предмета',
	`ni_Specifications` VARCHAR(500) NULL COMMENT 'Характеристики нейтрального предмета',
	CONSTRAINT `PK_Neutral Item` PRIMARY KEY (`ni_ID` ASC)
)

;

CREATE TABLE `Organizers`
(
	`op_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID организатора',
	`op_Name` VARCHAR(50) NULL COMMENT 'Название организатора',
	CONSTRAINT `PK_Organizers` PRIMARY KEY (`op_ID` ASC)
)

;

CREATE TABLE `Pick-Ban`
(
	`pb_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`pb_Game` INT UNSIGNED NOT NULL COMMENT 'ID игры',
	`pb_Hero` INT UNSIGNED NOT NULL COMMENT 'ID героя',
	`pb_Status` ENUM('pick', 'ban') NULL COMMENT 'Статус героя',
	CONSTRAINT `PK_Pick-Ban` PRIMARY KEY (`pb_ID` ASC)
)

;

CREATE TABLE `Player`
(
	`pl_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID игрока',
	`pl_FirstName` VARCHAR(50) NULL COMMENT 'Имя игрока',
	`pl_LastName` VARCHAR(50) NULL COMMENT 'Фамилия игрока',
	`pl_Nickname` VARCHAR(50) NULL COMMENT 'Игровой Nickname ',
	`pl_Country` INT UNSIGNED NOT NULL COMMENT 'Страна игрока',
	`pl_MMR` INT UNSIGNED NULL COMMENT 'Match Making Rating',
	`pl_Rang` INT UNSIGNED NULL COMMENT 'Ранг игрока в мировом топе',
	CONSTRAINT `PK_Player` PRIMARY KEY (`pl_ID` ASC)
)

;

CREATE TABLE `Skills`
(
	`sk_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID способности',
	`sk_Name` VARCHAR(50) NULL COMMENT 'Название способности',
	`sk_Description` VARCHAR(5000) NULL COMMENT 'Описание способности',
	`sk_Specifications` VARCHAR(500) NULL COMMENT 'Характеристики способности',
	`sk_ManaCost` INT UNSIGNED NULL COMMENT 'Стоимость маны',
	`sk_HealthCost` INT UNSIGNED NULL COMMENT 'Стоимость здоровья',
	`sk_Reaload` FLOAT(4,1) UNSIGNED NULL COMMENT 'Перезарядка способности',
	`sk_MaxLVL` TINYINT UNSIGNED NULL COMMENT 'Максимальный уровень способности',
	CONSTRAINT `PK_Skills` PRIMARY KEY (`sk_ID` ASC)
)

;

CREATE TABLE `Studio`
(
	`st_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID студии освещения',
	`st_Name` VARCHAR(50) NULL COMMENT 'Название студии',
	CONSTRAINT `PK_Studio` PRIMARY KEY (`st_ID` ASC)
)

;

CREATE TABLE `Team-Rating`
(
	`tmr_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`tmr_Team` INT UNSIGNED NULL COMMENT 'ID команды',
	`tmr_RatingAdd` SMALLINT UNSIGNED NULL COMMENT 'Сколько очков добавлено',
	`tmr_Date` DATE NULL COMMENT 'Дата добавления очков',
	CONSTRAINT `PK_Team-Rating` PRIMARY KEY (`tmr_ID` ASC)
)

;

CREATE TABLE `Team-Rang`
(
	`tmrg_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
	`tmrg_Team` INT UNSIGNED NULL,
	`tmrg_Rang` INT UNSIGNED NULL,
	CONSTRAINT `PK_Team-Rang` PRIMARY KEY (`tmrg_ID` ASC)
)

;

CREATE TABLE `Teams`
(
	`tm_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID команды',
	`tm_Name` VARCHAR(50) NULL COMMENT 'Название команды',
	`tm_Rating` INT UNSIGNED NULL COMMENT 'Рейтинг команды(PTS)',
	CONSTRAINT `PK_Teams` PRIMARY KEY (`tm_ID` ASC)
)

;

CREATE TABLE `Tournaments`
(
	`tr_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID турнира',
	`tr_Name` VARCHAR(50) NULL COMMENT 'Название турнира',
	`tr_Tier` TINYINT UNSIGNED NULL COMMENT 'Уровень турнира(зависит от рейтинга играющих на турнире команд)',
	`tr_Participants` SMALLINT UNSIGNED NULL COMMENT 'Число команд-участников на турнире',
	`tr_Organizer` INT UNSIGNED NOT NULL COMMENT 'ID организатора',
	`tr_Prize` INT UNSIGNED NULL COMMENT 'Призовой фонд($)',
	`tr_Place` VARCHAR(50) NULL COMMENT 'Место проведения турнира: Страна, город',
	`tr_StartDate` DATE NULL COMMENT 'Дата начала турнира',
	`tr_EndDate` DATE NULL COMMENT 'Дата окончания турнираы',
	CONSTRAINT `PK_Tournaments` PRIMARY KEY (`tr_ID` ASC)
)

;

CREATE TABLE `Units`
(
	`u_ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID сущности',
	`u_Name` VARCHAR(50) NULL COMMENT 'Имя сущности',
	`u_Description` VARCHAR(100) NULL COMMENT 'Описание сущности',
	`u_Type` ENUM('structures', 'lane creeps', 'small creeps', 'medium creeps', 'large creeps', 'ancient creeps', 'roshan', 'tormentor', 'observer') NULL COMMENT 'Тип сущности',
	`u_HP` SMALLINT UNSIGNED NULL COMMENT 'Базовое значение очков здоровья',
	`u_MP` SMALLINT UNSIGNED NULL COMMENT 'Базовое значение очков маны',
	`u_HPR` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовое восстановление здоровья',
	`u_MPR` FLOAT(5,1) UNSIGNED NULL COMMENT 'Базовое восстановление очков маны',
	`u_Damage` SMALLINT UNSIGNED NULL COMMENT 'Базовый урон',
	`u_MoveSpeed` SMALLINT UNSIGNED NULL COMMENT 'Базовая скорость передвижения',
	`u_Armor` SMALLINT UNSIGNED NULL COMMENT 'Базовая броня',
	`u_AttackSpeed` SMALLINT UNSIGNED NULL COMMENT 'Базовая скорость атаки',
	`u_AttackInterval` FLOAT(5,3) UNSIGNED NULL COMMENT 'Базовый интервал атак',
	`u_AttackType` ENUM('melee', 'reange') NULL COMMENT 'Тип атаки',
	`u_AttackRange` SMALLINT UNSIGNED NULL COMMENT 'Базовая дальность атаки',
	`u_SpellAMP` FLOAT(4,3) UNSIGNED NULL COMMENT 'Дополнительный урон заклинаний',
	`u_MagicResist` FLOAT(4,3) UNSIGNED NULL COMMENT 'Базовое сопротивление магии',
	`u_StatusResist` FLOAT(4,3) UNSIGNED NULL COMMENT 'Базовое сопротивление эффектам',
	`u_Gold` INT UNSIGNED NULL COMMENT 'Золото за убийство',
	`u_Experience` INT UNSIGNED NULL COMMENT 'Опыт за убийство',
	CONSTRAINT `PK_Units` PRIMARY KEY (`u_ID` ASC)
)

;

CREATE TABLE `Unit-Skill`
(
	`us_Unit` INT UNSIGNED NOT NULL COMMENT 'ID сущности',
	`us_Skill` INT UNSIGNED NOT NULL COMMENT 'ID способности',
	`us_Numer` TINYINT UNSIGNED NULL COMMENT 'Номер способности',
	CONSTRAINT `PK_Unit-Skill` PRIMARY KEY (`us_Skill` ASC, `us_Unit` ASC)
)

;

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE `Assembling Items` 
 ADD INDEX `IXFK_Assembling Items_Items` (`ai_CraftedItem` ASC)
;

ALTER TABLE `Assembling Items` 
 ADD INDEX `IXFK_Assembling Items_Items_02` (`ai_IngredientItem` ASC)
;

ALTER TABLE `Country`
ADD CONSTRAINT `UNQ_cn_Name` UNIQUE (`cn_Name`)
;

ALTER TABLE `Game` 
 ADD INDEX `IXFK_Game_Match` (`g_Match` ASC)
;

ALTER TABLE `Game` 
 ADD INDEX `IXFK_Game_Teams` (`g_Winner` ASC)
;

DELIMITER //

CREATE TRIGGER `TRG_Game_CheckWinner_Insert`
BEFORE INSERT ON `Game`
FOR EACH ROW
BEGIN
	DECLARE match_count INT;

	-- Проверяем наличие записи с нужным ID матча и ID команды
	SELECT COUNT(*) INTO match_count
	FROM `m2m_Match-Team`
	WHERE `mtm_Match` = NEW.`g_Match` AND `mtm_Team` = NEW.`g_Winner`;

	-- Если запись не найдена, отменяем вставку
	IF match_count = 0 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No matching record in m2m_Match-Team for the specified match and team.';
	END IF;
END //


CREATE TRIGGER `TRG_Game_CheckWinner_Update`
BEFORE UPDATE ON `Game`
FOR EACH ROW
BEGIN
	DECLARE match_count INT;

	-- Проверяем наличие записи с нужным ID матча и ID команды
	SELECT COUNT(*) INTO match_count
	FROM `m2m_Match-Team`
	WHERE `mtm_Match` = NEW.`g_Match` AND `mtm_Team` = NEW.`g_Winner`;

	-- Если запись не найдена, отменяем вставку
	IF match_count = 0 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No matching record in m2m_Match-Team for the specified match and team.';
	END IF;
END //

DELIMITER ;

ALTER TABLE `Game-Player` 
 ADD INDEX `IXFK_Game-Player_Game` (`gpl_Game` ASC)
;

ALTER TABLE `Game-Player` 
 ADD INDEX `IXFK_Game-Player_Hero` (`gpl_Hero` ASC)
;

ALTER TABLE `Game-Player` 
 ADD INDEX `IXFK_Game-Player_NeutralItem` (`gpl_NeutralItem` ASC)
;

ALTER TABLE `Game-Player` 
 ADD INDEX `IXFK_Game-Player_Player` (`gpl_Player` ASC)
;

DELIMITER //
CREATE TRIGGER `TRG_Game-Player_CheckHero_Insert`
BEFORE INSERT ON `Game-Player`
FOR EACH ROW
BEGIN
    DECLARE status_check INT;
    
    -- Проверяем, есть ли запись с нужным статусом в таблице Pick_Ban
    SELECT COUNT(*) INTO status_check
    FROM `Pick_Ban`
    WHERE `pb_Status` = 'pick' AND `pb_Hero` = NEW.`gpl_Hero`;
    
    IF status_check = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid value for gpl_Hero. Hero is not picked.';
    END IF;
END //

CREATE TRIGGER `TRG_Game-Player_CheckHero_Update`
BEFORE UPDATE ON `Game-Player`
FOR EACH ROW
BEGIN
    DECLARE status_check INT;
    
    -- Проверяем, есть ли запись с нужным статусом в таблице Pick_Ban
    SELECT COUNT(*) INTO status_check
    FROM `Pick_Ban`
    WHERE `pb_Status` = 'pick' AND `pb_Hero` = NEW.`gpl_Hero`;
    
    IF status_check = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid value for gpl_Hero. Hero is not picked.';
    END IF;
END //

DELIMITER ;

ALTER TABLE `Game-Player-Item` 
 ADD INDEX `IXFK_Game-Player-Item_Game-Player` (`gpli_Game-Player` ASC)
;

ALTER TABLE `Game-Player-Item` 
 ADD INDEX `IXFK_Game-Player-Item_Items` (`gpli_Item` ASC)
;

ALTER TABLE `m2m_Hero-Skill` 
 ADD INDEX `IXFK_m2m_Hero-Skill_Heroes` (`hs_Hero` ASC)
;

ALTER TABLE `m2m_Hero-Skill` 
 ADD INDEX `IXFK_m2m_Hero-Skill_Skills` (`hs_Skill` ASC)
;

ALTER TABLE `m2m_Match-Team` 
 ADD INDEX `IXFK_m2m_Match-Team_Match` (`mtm_Match` ASC)
;

ALTER TABLE `m2m_Match-Team` 
 ADD INDEX `IXFK_m2m_Match-Team_Teams` (`mtm_Team` ASC)
;

ALTER TABLE `m2m_Player-Team` 
 ADD INDEX `IXFK_m2m_Player-Team_Player` (`pltm_Player` ASC)
;

ALTER TABLE `m2m_Player-Team` 
 ADD INDEX `IXFK_m2m_Player-Team_Teams` (`pltm_Team` ASC)
;

DELIMITER //

CREATE TRIGGER `TRG_m2m_Player-Team_Check_Dates_Insert`
BEFORE INSERT ON `m2m_Player-Team`
FOR EACH ROW
BEGIN
    IF NEW.`pltm_StartDate` > NEW.`pltm_EndDate` THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'StartDate cannot be greater than EndDate';
    END IF;
END //

CREATE TRIGGER `TRG_m2m_Player-Team_Check_Dates_Update`
BEFORE UPDATE ON `m2m_Player-Team`
FOR EACH ROW
BEGIN
    IF NEW.`pltm_StartDate` > NEW.`pltm_EndDate` THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'StartDate cannot be greater than EndDate';
    END IF;
END //

DELIMITER ;

ALTER TABLE `m2m_Tournament-Match` 
 ADD INDEX `IXFK_m2m_Tournament-Match_Match` (`trm_Match` ASC)
;

ALTER TABLE `m2m_Tournament-Match` 
 ADD INDEX `IXFK_m2m_Tournament-Match_Tournaments` (`trm_Tounament` ASC)
;

ALTER TABLE `m2m_Tournament-Studio` 
 ADD INDEX `IXFK_m2m_Tournament-Studio_Studio` (`trst_Studio` ASC)
;

ALTER TABLE `m2m_Tournament-Studio` 
 ADD INDEX `IXFK_m2m_Tournament-Studio_Tournaments` (`trst_Tournament` ASC)
;

ALTER TABLE `m2m_Tournament-Team` 
 ADD INDEX `IXFK_m2m_Tournament-Team_Teams` (`trtm_Team` ASC)
;

ALTER TABLE `m2m_Tournament-Team` 
 ADD INDEX `IXFK_m2m_Tournament-Team_Tournaments` (`trtm_Tournament` ASC)
;

DELIMITER //
CREATE TRIGGER `TRG_m2m_Tournament-Team_TeamCount`
AFTER INSERT ON `m2m_Tournament-Team`
FOR EACH ROW
BEGIN
    DECLARE tournamentID INT;
    DECLARE teamCount INT;

    -- Получаем ID турнира и количество команд участвующих в нем
    SELECT NEW.`trtm_Tournament`, `tr_Participants` INTO tournamentID, teamCount
    FROM `Tournaments`
    WHERE `tr_ID` = NEW.`trtm_Tournament`;

    -- Проверяем, соответствует ли количество команд участвующих в турнире числу записей в m2m_Tournament-Team
    IF teamCount = (SELECT COUNT(*) FROM `m2m_Tournament-Team` WHERE `trtm_Tournament` = tournamentID) THEN
        -- Вызываем хранимую процедуру для обновления уровня турнира
        CALL UpdateTournamentTierProcedure(tournamentID);
    END IF;
END //

DELIMITER ;

ALTER TABLE `Match` 
 ADD INDEX `IXFK_Match_Teams` (`m_Winner` ASC)
;

DELIMITER //
CREATE TRIGGER `TRG_Match_CheckWinner_Insert`
BEFORE INSERT ON `Match`
FOR EACH ROW
BEGIN
	DECLARE match_count INT;

	-- Проверяем наличие записи с нужным ID матча и ID команды
	SELECT COUNT(*) INTO match_count
	FROM `m2m_Match-Team`
	WHERE `mtm_Match` = NEW.`m_ID` AND `mtm_Team` = NEW.`m_Winner`;

	-- Если запись не найдена, отменяем вставку
	IF match_count = 0 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No matching record in m2m_Match-Team for the specified match and team.';
	END IF;
END //

CREATE TRIGGER `TRG_Match_CheckWinner_Update`
BEFORE UPDATE ON `Match`
FOR EACH ROW
BEGIN
	DECLARE match_count INT;

	-- Проверяем наличие записи с нужным ID матча и ID команды
	SELECT COUNT(*) INTO match_count
	FROM `m2m_Match-Team`
	WHERE `mtm_Match` = NEW.`m_ID` AND `mtm_Team` = NEW.`m_Winner`;
	-- Если запись не найдена, отменяем вставку
	IF match_count = 0 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No matching record in m2m_Match-Team for the specified match and team.';
	END IF;
END //

DELIMITER ;

ALTER TABLE `Pick-Ban` 
 ADD INDEX `IXFK_Pick-Ban_Game` (`pb_Game` ASC)
;

ALTER TABLE `Pick-Ban` 
 ADD INDEX `IXFK_Pick-Ban_Heroes` (`pb_Hero` ASC)
;

ALTER TABLE `Player` 
 ADD INDEX `IXFK_Player_Country` (`pl_Country` ASC)
;

ALTER TABLE `Player`
ADD CONSTRAINT `UNQ_pl_NickName` UNIQUE (`pl_NickName`)
;

ALTER TABLE `Team-Rang` 
 ADD CONSTRAINT `UNQ_tmrg_Team` UNIQUE (`tmrg_Team` ASC)
;

ALTER TABLE `Team-Rang` 
 ADD INDEX `IXFK_Team-Rang_Teams` (`tmrg_Team` ASC)
;

ALTER TABLE `Team-Rang` 
 ADD CONSTRAINT `FK_Team-Rang_Teams`
	FOREIGN KEY (`tmrg_Team`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Team-Rating` 
 ADD INDEX `IXFK_Team-Rating_Teams` (`tmr_Team` ASC)
;

ALTER TABLE `Teams` 
 ADD INDEX `UNQ_tm_Name` (`tm_Name`)
;

DELIMITER //

CREATE TRIGGER `TRG_Team_RangUpdate_Update`
AFTER UPDATE ON Teams
FOR EACH ROW
BEGIN
    UPDATE `Team-Rang` AS tr
    JOIN (
        SELECT tm_ID, RANK() OVER (ORDER BY tm_Rating DESC) AS new_rank
        FROM Teams
    ) AS ranked_teams ON tr.tmrg_Team = ranked_teams.tm_ID
    SET tr.tmrg_Rang = ranked_teams.new_rank;

END //

CREATE TRIGGER `TRG_Team_RangUpdate_Insert`
AFTER INSERT ON Teams
FOR EACH ROW
BEGIN
    UPDATE `Team-Rang` AS tr
    JOIN (
        SELECT tm_ID, RANK() OVER (ORDER BY tm_Rating DESC) AS new_rank
        FROM Teams
    ) AS ranked_teams ON tr.tmrg_Team = ranked_teams.tm_ID
    SET tr.tmrg_Rang = ranked_teams.new_rank;

END //

CREATE TRIGGER `TRG_Teams_Max_Rating_Insert`
BEFORE INSERT ON `Teams`
FOR EACH ROW
BEGIN
    IF NEW.`tm_Rating` > 1000 THEN
        SET NEW.`tm_Rating` = 1000;
    END IF;
END //

CREATE TRIGGER `TRG_Teams_Max_Rating_Update`
BEFORE UPDATE ON `Teams`
FOR EACH ROW
BEGIN
    IF NEW.`tm_Rating` > 1000 THEN
        SET NEW.`tm_Rating` = 1000;
    END IF;
END //

CREATE TRIGGER `TRG_Logging_Rating_Insert`
AFTER INSERT ON `Teams`
FOR EACH ROW
BEGIN
    IF NEW.`tm_Rating` > 0 THEN
        INSERT INTO `Team-Rating` (`tmr_Team`, `tmr_RatingAdd`, `tmr_Date`)
        VALUES (NEW.`tm_ID`, NEW.`tm_Rating`, NOW());
    END IF;
END //

CREATE TRIGGER `TRG_Logging_Rating_Update`
AFTER UPDATE ON `Teams`
FOR EACH ROW
BEGIN
    IF NEW.`tm_Rating` > OLD.`tm_Rating` THEN
        INSERT INTO `Team-Rating` (`tmr_Team`, `tmr_RatingAdd`, `tmr_Date`)
        VALUES (NEW.`tm_ID`, NEW.`tm_Rating` - OLD.`tm_Rating`, NOW());
    END IF;
END //

DELIMITER ;

ALTER TABLE `Tournaments` 
 ADD INDEX `IXFK_Tournaments_Organizers` (`tr_Organizer` ASC)
;

ALTER TABLE `Tournaments` 
 ADD INDEX `UNQ_tr_Name` (`tr_Name`)
;

DELIMITER //
CREATE TRIGGER `TRG_Tournaments_Check_Dates_Insert`
BEFORE INSERT ON `Tournaments`
FOR EACH ROW
BEGIN
    IF NEW.`tr_StartDate` > NEW.`tr_EndDate` THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'StartDate cannot be greater than EndDate';
    END IF;
END //

CREATE TRIGGER `TRG_Tournament_Check_Dates_Update`
BEFORE UPDATE ON `Tournaments`
FOR EACH ROW
BEGIN
    IF NEW.`tr_StartDate` > NEW.`tr_EndDate` THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'StartDate cannot be greater than EndDate';
    END IF;
END // 

DELIMITER ;

ALTER TABLE `Studio` 
 ADD INDEX `UNQ_st_Name` (`st_Name`)
;

ALTER TABLE `Organizers` 
 ADD INDEX `UNQ_op_Name` (`op_Name`)
;

ALTER TABLE `heroes` 
 ADD INDEX `UNQ_h_Name` (`h_Name`)
;

ALTER TABLE `skills` 
 ADD INDEX `UNQ_sk_Name` (`sk_Name`)
;

ALTER TABLE `units` 
 ADD INDEX `UNQ_u_Name` (`u_Name`)
;

ALTER TABLE `items` 
 ADD INDEX `UNQ_i_Name` (`i_Name`)
;

ALTER TABLE `neutral item` 
 ADD INDEX `UNQ_ni_Name` (`ni_Name`)
;

ALTER TABLE `Unit-Skill` 
 ADD INDEX `IXFK_Unit-Skill_Skills` (`us_Skill` ASC)
;

ALTER TABLE `Unit-Skill` 
 ADD INDEX `IXFK_Unit-Skill_Units` (`us_Unit` ASC)
;

/* Create Foreign Key Constraints */

ALTER TABLE `Assembling Items` 
 ADD CONSTRAINT `FK_Assembling Items_Items`
	FOREIGN KEY (`ai_CraftedItem`) REFERENCES `Items` (`i_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Assembling Items` 
 ADD CONSTRAINT `FK_Assembling Items_Items_02`
	FOREIGN KEY (`ai_IngredientItem`) REFERENCES `Items` (`i_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game` 
 ADD CONSTRAINT `FK_Game_Match`
	FOREIGN KEY (`g_Match`) REFERENCES `Match` (`m_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game` 
 ADD CONSTRAINT `FK_Game_Teams`
	FOREIGN KEY (`g_Winner`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game-Player` 
 ADD CONSTRAINT `FK_Game-Player_Game`
	FOREIGN KEY (`gpl_Game`) REFERENCES `Game` (`g_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game-Player` 
 ADD CONSTRAINT `FK_Game-Player_Hero`
	FOREIGN KEY (`gpl_Hero`) REFERENCES `Heroes` (`h_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game-Player` 
 ADD CONSTRAINT `FK_Game-Player_Neutral Item`
	FOREIGN KEY (`gpl_NeutralItem`) REFERENCES `Neutral Item` (`ni_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game-Player` 
 ADD CONSTRAINT `FK_Game-Player_Player`
	FOREIGN KEY (`gpl_Player`) REFERENCES `Player` (`pl_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game-Player-Item` 
 ADD CONSTRAINT `FK_Game-Player-Item_Game-Player`
	FOREIGN KEY (`gpli_Game-Player`) REFERENCES `Game-Player` (`gpl_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Game-Player-Item` 
 ADD CONSTRAINT `FK_Game-Player-Item_Items`
	FOREIGN KEY (`gpli_Item`) REFERENCES `Items` (`i_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Hero-Skill` 
 ADD CONSTRAINT `FK_m2m_Hero-Skill_Heroes`
	FOREIGN KEY (`hs_Hero`) REFERENCES `Heroes` (`h_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Hero-Skill` 
 ADD CONSTRAINT `FK_m2m_Hero-Skill_Skills`
	FOREIGN KEY (`hs_Skill`) REFERENCES `Skills` (`sk_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Match-Team` 
 ADD CONSTRAINT `FK_m2m_Match-Team_Match`
	FOREIGN KEY (`mtm_Match`) REFERENCES `Match` (`m_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Match-Team` 
 ADD CONSTRAINT `FK_m2m_Match-Team_Teams`
	FOREIGN KEY (`mtm_Team`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Player-Team` 
 ADD CONSTRAINT `FK_m2m_Player-Team_Player`
	FOREIGN KEY (`pltm_Player`) REFERENCES `Player` (`pl_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Player-Team` 
 ADD CONSTRAINT `FK_m2m_Player-Team_Teams`
	FOREIGN KEY (`pltm_Team`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Tournament-Match` 
 ADD CONSTRAINT `FK_m2m_Tournament-Match_Match`
	FOREIGN KEY (`trm_Match`) REFERENCES `Match` (`m_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Tournament-Match` 
 ADD CONSTRAINT `FK_m2m_Tournament-Match_Tournaments`
	FOREIGN KEY (`trm_Tounament`) REFERENCES `Tournaments` (`tr_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Tournament-Studio` 
 ADD CONSTRAINT `FK_m2m_Tournament-Studio_Studio`
	FOREIGN KEY (`trst_Studio`) REFERENCES `Studio` (`st_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Tournament-Studio` 
 ADD CONSTRAINT `FK_m2m_Tournament-Studio_Tournaments`
	FOREIGN KEY (`trst_Tournament`) REFERENCES `Tournaments` (`tr_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Tournament-Team` 
 ADD CONSTRAINT `FK_m2m_Tournament-Team_Teams`
	FOREIGN KEY (`trtm_Team`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `m2m_Tournament-Team` 
 ADD CONSTRAINT `FK_m2m_Tournament-Team_Tournaments`
	FOREIGN KEY (`trtm_Tournament`) REFERENCES `Tournaments` (`tr_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Match`
 ADD CONSTRAINT `FK_Match_Teams`
	FOREIGN KEY (`m_Winner`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Pick-Ban` 
 ADD CONSTRAINT `FK_Pick-Ban_Game`
	FOREIGN KEY (`pb_Game`) REFERENCES `Game` (`g_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Pick-Ban` 
 ADD CONSTRAINT `FK_Pick-Ban_Heroes`
	FOREIGN KEY (`pb_Hero`) REFERENCES `Heroes` (`h_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Player` 
 ADD CONSTRAINT `FK_Player_Country`
	FOREIGN KEY (`pl_Country`) REFERENCES `Country` (`cn_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Team-Rating` 
 ADD CONSTRAINT `FK_Team-Rating_Teams`
	FOREIGN KEY (`tmr_Team`) REFERENCES `Teams` (`tm_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Tournaments` 
 ADD CONSTRAINT `FK_Tournaments_Organizers`
	FOREIGN KEY (`tr_Organizer`) REFERENCES `Organizers` (`op_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Unit-Skill` 
 ADD CONSTRAINT `FK_Unit-Skill_Skills`
	FOREIGN KEY (`us_Skill`) REFERENCES `Skills` (`sk_ID`) ON DELETE Cascade ON UPDATE Cascade
;

ALTER TABLE `Unit-Skill` 
 ADD CONSTRAINT `FK_Unit-Skill_Units`
	FOREIGN KEY (`us_Unit`) REFERENCES `Units` (`u_ID`) ON DELETE Cascade ON UPDATE Cascade
;

SET FOREIGN_KEY_CHECKS=1
; 
/* Create Stored Procedures */

DELIMITER //

CREATE PROCEDURE AddRatingPoints(IN team_id INT, IN tournament_id INT)
BEGIN
    DECLARE place INT;
    DECLARE tier INT;
    DECLARE rating_points INT;

    SELECT `trtm_Resul`t INTO place
    FROM `m2m_Tournament-Team`
    WHERE `trtm_Team` = team_id AND `trtm_Tournament` = tournament_id;

    SELECT `tr_Tier` INTO tier
    FROM `Tournaments`
    WHERE `tr_ID` = tournament_id;

    CASE tier
        WHEN 1 THEN
            CASE place
                WHEN 1 THEN SET rating_points = 300;
                WHEN 2 THEN SET rating_points = 180;
                WHEN 3 THEN SET rating_points = 120;
				WHEN 4 THEN SET rating_points = 60;
				WHEN 5 THEN SET rating_points = 40;
				WHEN 6 THEN SET rating_points = 40;
				WHEN 7 THEN SET rating_points = 24;
				WHEN 8 THEN SET rating_points = 24;
				WHEN 9 THEN SET rating_points = 15;
				WHEN 10 THEN SET rating_points = 15;
				WHEN 11 THEN SET rating_points = 15;
				WHEN 12 THEN SET rating_points = 15;
				WHEN 13 THEN SET rating_points = 10;
				WHEN 14 THEN SET rating_points = 10;
				WHEN 15 THEN SET rating_points = 10;
				WHEN 16 THEN SET rating_points = 10;
				WHEN 17 THEN SET rating_points = 6;
				WHEN 18 THEN SET rating_points = 6;
				WHEN 19 THEN SET rating_points = 6;
				WHEN 20 THEN SET rating_points = 6;
				ELSE SET rating_points = 0;
            END CASE;
        WHEN 2 THEN
            CASE place
                WHEN 1 THEN SET rating_points = 100;
                WHEN 2 THEN SET rating_points = 60;
                WHEN 3 THEN SET rating_points = 40;
				WHEN 4 THEN SET rating_points = 24;
				WHEN 5 THEN SET rating_points = 15;
				WHEN 6 THEN SET rating_points = 15;
				WHEN 7 THEN SET rating_points = 10;
				WHEN 8 THEN SET rating_points = 10;
				WHEN 9 THEN SET rating_points = 6;
				WHEN 10 THEN SET rating_points = 6;
				WHEN 11 THEN SET rating_points = 6;
				WHEN 12 THEN SET rating_points = 6;
				WHEN 13 THEN SET rating_points = 4;
				WHEN 14 THEN SET rating_points = 4;
				WHEN 15 THEN SET rating_points = 4;
				WHEN 16 THEN SET rating_points = 4;
				WHEN 17 THEN SET rating_points = 2;
				WHEN 18 THEN SET rating_points = 2;
				WHEN 19 THEN SET rating_points = 2;
				WHEN 20 THEN SET rating_points = 2;
				ELSE SET rating_points = 0;
            END CASE;
        WHEN 3 THEN
            CASE place
                WHEN 1 THEN SET rating_points = 50;
                WHEN 2 THEN SET rating_points = 30;
                WHEN 3 THEN SET rating_points = 20;
				WHEN 4 THEN SET rating_points = 12;
				WHEN 5 THEN SET rating_points = 8;
				WHEN 6 THEN SET rating_points = 8;
				WHEN 7 THEN SET rating_points = 4;
				WHEN 8 THEN SET rating_points = 4;
				WHEN 9 THEN SET rating_points = 2;
				WHEN 10 THEN SET rating_points = 2;
				WHEN 11 THEN SET rating_points = 2;
				WHEN 12 THEN SET rating_points = 2;
				WHEN 13 THEN SET rating_points = 1;
				WHEN 14 THEN SET rating_points = 1;
				WHEN 15 THEN SET rating_points = 1;
				WHEN 16 THEN SET rating_points = 1;
				ELSE SET rating_points = 0;
            END CASE;
        WHEN 4 THEN
            CASE place
                WHEN 1 THEN SET rating_points = 20;
                WHEN 2 THEN SET rating_points = 12;
                WHEN 3 THEN SET rating_points = 8;
				WHEN 4 THEN SET rating_points = 4;
				WHEN 5 THEN SET rating_points = 2;
				WHEN 6 THEN SET rating_points = 2;
				WHEN 7 THEN SET rating_points = 1;
				WHEN 8 THEN SET rating_points = 1;
				ELSE SET rating_points = 0;
            END CASE;
    END CASE;

    UPDATE `Teams`
    SET `tm_Rating` = `tm_Rating` + rating_points
    WHERE `tm_ID` = team_id;
END //

CREATE PROCEDURE RatingDecrease()
BEGIN
    DECLARE period1_start DATE;
    DECLARE period1_end DATE;
    DECLARE period2_start DATE;
    DECLARE period2_end DATE;
    DECLARE period3_start DATE;
    DECLARE period3_end DATE;
    DECLARE period4_start DATE;
    DECLARE period4_end DATE;

    SET period1_start = DATE_SUB(CURDATE(), INTERVAL 35 DAY);
    SET period1_end = DATE_SUB(CURDATE(), INTERVAL 29 DAY);
    SET period2_start = DATE_SUB(CURDATE(), INTERVAL 70 DAY);
    SET period2_end = DATE_SUB(CURDATE(), INTERVAL 61 DAY);
    SET period3_start = DATE_SUB(CURDATE(), INTERVAL 105 DAY);
    SET period3_end = DATE_SUB(CURDATE(), INTERVAL 99 DAY);
    SET period4_start = DATE_SUB(CURDATE(), INTERVAL 140 DAY);
    SET period4_end = DATE_SUB(CURDATE(), INTERVAL 134 DAY);

    UPDATE `Teams` t
    SET `tm_Rating` = `tm_Rating` - (0.25 * (
        SELECT SUM(`tmr_RatingAdd`)
        FROM `Team_Rating` tr
        WHERE tr.`tmr_Team` = t.`tm_ID`
            AND (
                (tr.`tmr_Date` BETWEEN period1_start AND period1_end)
                OR (tr.`tmr_Date` BETWEEN period2_start AND period2_end)
                OR (tr.`tmr_Date` BETWEEN period3_start AND period3_end)
                OR (tr.`tmr_Date` BETWEEN period4_start AND period4_end)
            )
    ));
END //

CREATE PROCEDURE GetTeamsToUpdateRating(IN tournament_id INT)
BEGIN
	DECLARE team_id INT;
    DECLARE done INT DEFAULT 0;
    
	DECLARE teams_cursor CURSOR FOR
		SELECT DISTINCT `trtm_Team`
        FROM `m2m_Tournament-Team`
        WHERE `trtm_Tournament` = tournament_id;
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	OPEN teams_cursor;

	read_teams: LOOP
		FETCH teams_cursor INTO team_id;
		IF (team_id IS NULL) THEN
			LEAVE read_teams;
		END IF;

		CALL AddRatingPoints(team_id, tournament_id);
	END LOOP;

	CLOSE teams_cursor;
END //

CREATE PROCEDURE GetTournamentsToUpdateRating(IN last_week_start DATE, IN last_week_end DATE)
BEGIN
	DECLARE tournament_id INT;
	DECLARE done INT DEFAULT 0;
    
	DECLARE tournaments_cursor CURSOR FOR
        SELECT `tr_ID`
        FROM `Tournaments`
        WHERE `tr_EndDate` BETWEEN last_week_start AND last_week_end;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN tournaments_cursor;

    read_tournaments: LOOP
        FETCH tournaments_cursor INTO tournament_id;
        IF done THEN
            LEAVE read_tournaments;
        END IF;
        
        CALL GetTeamsToUpdateRating(tournament_id);
    END LOOP;

    CLOSE tournaments_cursor;
END //

CREATE PROCEDURE UpdateRatingPoints()
BEGIN
    DECLARE last_week_start DATE;
    DECLARE last_week_end DATE;
    SET last_week_start = DATE_SUB(CURDATE(), INTERVAL 7 DAY);
    SET last_week_end = DATE_SUB(CURDATE(), INTERVAL 1 DAY);

    CALL GetTournamentsToUpdateRating(last_week_start, last_week_end);
END //

CREATE PROCEDURE UpdateTournamentTierProcedure(IN tournamentID INT)
BEGIN
    DECLARE participantCount INT;
    DECLARE tier1Count INT;
    DECLARE tier2Count INT;
    DECLARE tier3Count INT;

    SELECT `tr_Participants` INTO participantCount FROM Tournaments WHERE `tr_ID` = tournamentID;

    SELECT COUNT(*) INTO tier1Count FROM Teams WHERE `tm_Rang` <= participantCount;

    SELECT COUNT(*) INTO tier2Count FROM Teams WHERE `tm_Rang` <= (participantCount * 2);

    SELECT COUNT(*) INTO tier3Count FROM Teams WHERE `tm_Rang` <= (participantCount * 4);

    IF (tier1Count >= participantCount / 2) THEN
        UPDATE Tournaments SET `tr_Tier` = 1 WHERE `tr_ID` = tournamentID;
    ELSEIF (tier2Count >= participantCount / 2) THEN
        UPDATE Tournaments SET `tr_Tier` = 2 WHERE `tr_ID` = tournamentID;
    ELSEIF (tier3Count >= participantCount / 2) THEN
        UPDATE Tournaments SET `tr_Tier` = 3 WHERE `tr_ID` = tournamentID;
    ELSE
        UPDATE Tournaments SET `tr_Tier` = 4 WHERE `tr_ID` = tournamentID;
    END IF;
END //

DELIMITER ;